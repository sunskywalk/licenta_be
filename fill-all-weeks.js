const mongoose = require('mongoose');
const Schedule = require('./models/Schedule');

async function fillAllWeeks() {
  try {
    await mongoose.connect('mongodb://127.0.0.1:27017/schoolCatalog', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Connected to MongoDB');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const existingSchedules = await Schedule.find({});
    console.log(`üìÖ Found ${existingSchedules.length} existing schedules`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º –∏ –¥–Ω—è–º
    const schedulesByClassAndDay = {};
    existingSchedules.forEach(schedule => {
      const key = `${schedule.classId}_${schedule.dayOfWeek}_${schedule.semester}`;
      if (!schedulesByClassAndDay[key]) {
        schedulesByClassAndDay[key] = [];
      }
      schedulesByClassAndDay[key].push(schedule);
    });

    console.log(`üìä Found ${Object.keys(schedulesByClassAndDay).length} unique class-day combinations`);

    let createdCount = 0;
    let skippedCount = 0;

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —Å–æ–∑–¥–∞–µ–º 16 –Ω–µ–¥–µ–ª—å
    for (let semester = 1; semester <= 2; semester++) {
      console.log(`\nüéì Processing semester ${semester}...`);
      
      for (let week = 1; week <= 16; week++) {
        console.log(`üìÖ Processing week ${week}...`);
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º –∫–ª–∞—Å—Å-–¥–µ–Ω—å
        for (const [key, schedules] of Object.entries(schedulesByClassAndDay)) {
          const [classId, dayOfWeek, originalSemester] = key.split('_');
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π —Å–µ–º–µ—Å—Ç—Ä
          if (parseInt(originalSemester) !== semester) continue;
          
          // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω
          const templateSchedule = schedules[0];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
          const existingWeekSchedule = await Schedule.findOne({
            classId: templateSchedule.classId,
            dayOfWeek: parseInt(dayOfWeek),
            week: week,
            semester: semester,
            year: templateSchedule.year
          });
          
          if (existingWeekSchedule) {
            skippedCount++;
            continue;
          }
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
          const newSchedule = new Schedule({
            classId: templateSchedule.classId,
            dayOfWeek: parseInt(dayOfWeek),
            week: week,
            semester: semester,
            year: templateSchedule.year,
            periods: templateSchedule.periods.map(period => ({
              startTime: period.startTime,
              endTime: period.endTime,
              subject: period.subject,
              teacherId: period.teacherId,
              room: period.room
            }))
          });
          
          await newSchedule.save();
          createdCount++;
        }
      }
    }

    console.log(`\nüéâ Filling completed!`);
    console.log(`‚úÖ Created schedules: ${createdCount}`);
    console.log(`‚è≠Ô∏è Skipped existing: ${skippedCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalSchedules = await Schedule.countDocuments();
    console.log(`üìä Total schedules in database: ${totalSchedules}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ–¥–µ–ª—è–º
    console.log('\nüìà Schedules per week:');
    for (let week = 1; week <= 16; week++) {
      const weekCount = await Schedule.countDocuments({ week: week });
      console.log(`  Week ${week}: ${weekCount} schedules`);
    }

    mongoose.connection.close();
  } catch (error) {
    console.error('‚ùå Error:', error);
    mongoose.connection.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fillAllWeeks(); 