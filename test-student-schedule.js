const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('./models/User');
const Schedule = require('./models/Schedule');
const Grade = require('./models/Grade');
const Homework = require('./models/Homework');
const Classroom = require('./models/Classroom');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
mongoose.connect('mongodb://localhost:27017/school_management', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function testStudentScheduleAPI() {
  try {
    console.log('üîç Testing student schedule API...');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    const student = await User.findOne({ 
      role: 'student',
      classRooms: { $exists: true, $ne: [] }
    }).populate('classRooms');
    
    if (!student) {
      console.log('‚ùå No student found');
      return;
    }
    
    console.log('üë§ Student found:', student.name);
    console.log('üìö Student classRooms:', student.classRooms.map(c => c.name));
    
    const classId = student.classRooms[0]._id;
    console.log('üè´ Using classId:', classId);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞
    const schedules = await Schedule.find({ classId: classId })
      .populate('classId')
      .populate('periods.teacherId')
      .sort({ dayOfWeek: 1, week: 1 });
    
    console.log('üìÖ Found schedules:', schedules.length);
    
    if (schedules.length === 0) {
      console.log('‚ùå No schedules found for this class');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    const firstSchedule = schedules[0];
    console.log('üìä First schedule:', {
      dayOfWeek: firstSchedule.dayOfWeek,
      week: firstSchedule.week,
      periodsCount: firstSchedule.periods.length
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Ä–æ–∫–∞
    if (firstSchedule.periods.length > 0) {
      const firstPeriod = firstSchedule.periods[0];
      console.log('üìñ Testing lesson details for:', firstPeriod.subject);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ü–µ–Ω–∫–∏ –∏ –¥–æ–º–∞—à–∫–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
      const grades = await Grade.find({ 
        student: student._id, 
        subject: firstPeriod.subject 
      }).sort({ createdAt: -1 });
      
      const homework = await Homework.find({ 
        subject: firstPeriod.subject 
      }).sort({ createdAt: -1 });
      
      console.log('üìä Grades found:', grades.length);
      console.log('üìö Homework found:', homework.length);
      
      if (grades.length > 0) {
        console.log('üìä First grade:', {
          value: grades[0].value,
          type: grades[0].type,
          comment: grades[0].comment || 'No comment'
        });
      }
      
      if (homework.length > 0) {
        console.log('üìö First homework:', {
          title: homework[0].title,
          description: homework[0].description || 'No description'
        });
      }
    }
    
    console.log('‚úÖ Student schedule API test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error testing student schedule API:', error);
  } finally {
    mongoose.connection.close();
  }
}

testStudentScheduleAPI(); 