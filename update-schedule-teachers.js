const mongoose = require('mongoose');
const Schedule = require('./models/Schedule');
const User = require('./models/User');
const Classroom = require('./models/Classroom');

// –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫ –∫–æ–¥–∞–º —É—á–∏—Ç–µ–ª–µ–π
const subjectToTeacherCode = {
  'Matematica': ['Prof_Math_1', 'Prof_Math_2', 'Prof_Math_3', 'Prof_Math_4'],
  'Limba rom√¢nƒÉ': ['Prof_ROM_1', 'Prof_ROM_2', 'Prof_ROM_3'],
  'EnglezƒÉ': ['Prof_ENG_1', 'Prof_ENG_2', 'Prof_ENG_3'],
  'FrancezƒÉ': ['Prof_FR'],
  'FizicƒÉ': ['Prof_FIZ'],
  'Chimie': ['Prof_CHIM'],
  'Biologie': ['Prof_BIO'],
  'Istorie': ['Prof_IST'],
  'Geografie': ['Prof_GEO'],
  'TIC': ['Prof_TIC'],
  'Educa»õie plasticƒÉ': ['Prof_ART'],
  'Educa»õie muzicalƒÉ': ['Prof_MUZ'],
  'Tehnologii': ['Prof_TECH'],
  'Educa»õie fizicƒÉ': ['Prof_EF_1', 'Prof_EF_2'],
  'Educa»õie religioasƒÉ': ['Prof_REL'],
  'Educa»õie civicƒÉ': ['Prof_EC']
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É—á–∏—Ç–µ–ª—è –¥–ª—è –∫–ª–∞—Å—Å–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞
function getTeacherForClass(subject, className) {
  const teacherCodes = subjectToTeacherCode[subject];
  if (!teacherCodes) {
    console.error(`‚ùå No teacher found for subject: ${subject}`);
    return null;
  }

  // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º
  if (subject === 'Matematica') {
    if (['5A', '5B'].includes(className)) return 'Prof_Math_1';
    if (['6A', '6B'].includes(className)) return 'Prof_Math_2';
    if (['7A', '7B', '8A', '8B'].includes(className)) return 'Prof_Math_3';
    if (['9A', '9B'].includes(className)) return 'Prof_Math_4';
  } else if (subject === 'Limba rom√¢nƒÉ') {
    if (['5A', '5B', '6A', '6B'].includes(className)) return 'Prof_ROM_1';
    if (['7A', '7B', '8A'].includes(className)) return 'Prof_ROM_2';
    if (['9A', '9B'].includes(className)) return 'Prof_ROM_3';
  } else if (subject === 'EnglezƒÉ') {
    if (['5A', '5B', '6A', '6B'].includes(className)) return 'Prof_ENG_1';
    if (['7A', '7B', '8A', '8B'].includes(className)) return 'Prof_ENG_2';
    if (['9A', '9B'].includes(className)) return 'Prof_ENG_3';
  } else if (subject === 'Educa»õie fizicƒÉ') {
    if (['5A', '5B', '6A', '6B'].includes(className)) return 'Prof_EF_1';
    if (['7A', '7B', '8A', '8B', '9A', '9B'].includes(className)) return 'Prof_EF_2';
  } else {
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è
    return teacherCodes[0];
  }
  
  return teacherCodes[0];
}

async function updateScheduleWithProperTeachers() {
  try {
    await mongoose.connect('mongodb://127.0.0.1:27017/schoolCatalog', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Connected to MongoDB');

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
    const teachers = await User.find({ role: 'teacher' });
    const teacherMap = {};
    teachers.forEach(teacher => {
      teacherMap[teacher.teacherCode] = teacher._id;
    });

    console.log(`üìã Found ${teachers.length} teachers in database`);

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
    const classrooms = await Classroom.find({});
    const classroomMap = {};
    classrooms.forEach(classroom => {
      classroomMap[classroom.name] = classroom._id;
    });

    console.log(`üìã Found ${classrooms.length} classrooms in database`);

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const schedules = await Schedule.find({}).populate('classId', 'name');
    console.log(`üìÖ Found ${schedules.length} schedules to update`);

    let updatedCount = 0;
    let errorCount = 0;

    for (const schedule of schedules) {
      const className = schedule.classId.name;
      
      // –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
      for (let i = 0; i < schedule.periods.length; i++) {
        const period = schedule.periods[i];
        const subject = period.subject;
        
        // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É—á–∏—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        const teacherCode = getTeacherForClass(subject, className);
        
        if (teacherCode && teacherMap[teacherCode]) {
          const oldTeacherId = period.teacherId;
          const newTeacherId = teacherMap[teacherCode];
          
          if (oldTeacherId.toString() !== newTeacherId.toString()) {
            schedule.periods[i].teacherId = newTeacherId;
            updatedCount++;
            console.log(`‚úÖ Updated ${className} - ${subject}: ${teacherCode}`);
          }
        } else {
          errorCount++;
          console.error(`‚ùå No teacher found for ${className} - ${subject}`);
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      await schedule.save();
    }

    console.log(`\nüéâ Schedule update completed!`);
    console.log(`‚úÖ Updated periods: ${updatedCount}`);
    console.log(`‚ùå Errors: ${errorCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä Verification:');
    const updatedSchedules = await Schedule.find({}).populate('classId', 'name').populate('periods.teacherId', 'name teacherCode');
    
    for (const schedule of updatedSchedules) {
      console.log(`\nüìÖ ${schedule.classId.name} - ${schedule.dayOfWeek}:`);
      schedule.periods.forEach(period => {
        console.log(`  ${period.startTime}-${period.endTime}: ${period.subject} (${period.teacherId.teacherCode})`);
      });
    }

    mongoose.connection.close();
  } catch (error) {
    console.error('‚ùå Error:', error);
    mongoose.connection.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateScheduleWithProperTeachers(); 