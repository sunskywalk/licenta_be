// controllers/scheduleController.js
const Schedule = require('../models/Schedule');
const Classroom = require('../models/Classroom');

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const checkScheduleConflicts = async (classId, dayOfWeek, periods, excludeScheduleId = null) => {
  const conflicts = [];
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
  const existingSchedules = await Schedule.find({
    dayOfWeek: dayOfWeek,
    ...(excludeScheduleId && { _id: { $ne: excludeScheduleId } })
  }).populate('classId', 'name').populate('periods.teacherId', 'name');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  for (const newPeriod of periods) {
    const newStartTime = newPeriod.startTime;
    const newEndTime = newPeriod.endTime;
    const newTeacherId = newPeriod.teacherId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏
    for (const existingSchedule of existingSchedules) {
      for (const existingPeriod of existingSchedule.periods) {
        const existingStartTime = existingPeriod.startTime;
        const existingEndTime = existingPeriod.endTime;
        const existingTeacherId = existingPeriod.teacherId._id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        const timesOverlap = (newStartTime < existingEndTime && newEndTime > existingStartTime);
        
        if (timesOverlap) {
          // –ö–æ–Ω—Ñ–ª–∏–∫—Ç —É—á–∏—Ç–µ–ª—è - –æ–¥–∏–Ω —É—á–∏—Ç–µ–ª—å –≤ —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è
          if (newTeacherId.toString() === existingTeacherId.toString()) {
            conflicts.push({
              type: 'teacher_conflict',
              message: `–£—á–∏—Ç–µ–ª—å ${existingPeriod.teacherId.name} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ ${existingStartTime}-${existingEndTime} –≤ –∫–ª–∞—Å—Å–µ ${existingSchedule.classId.name}`,
              time: `${existingStartTime}-${existingEndTime}`,
              teacher: existingPeriod.teacherId.name,
              conflictClass: existingSchedule.classId.name,
              subject: existingPeriod.subject
            });
          }
          
          // –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∫–ª–∞—Å—Å–∞ - –æ–¥–∏–Ω –∫–ª–∞—Å—Å –Ω–µ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥–≤–∞ —É—Ä–æ–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
          if (classId.toString() === existingSchedule.classId._id.toString()) {
            conflicts.push({
              type: 'class_conflict',
              message: `–ö–ª–∞—Å—Å ${existingSchedule.classId.name} —É–∂–µ –∏–º–µ–µ—Ç —É—Ä–æ–∫ ${existingPeriod.subject} –≤ ${existingStartTime}-${existingEndTime}`,
              time: `${existingStartTime}-${existingEndTime}`,
              class: existingSchedule.classId.name,
              conflictSubject: existingPeriod.subject
            });
          }
        }
      }
    }
  }
  
  return conflicts;
};

exports.createSchedule = async (req, res) => {
  try {
    const { classId, dayOfWeek, week, semester, year, periods } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    const conflicts = await checkScheduleConflicts(classId, dayOfWeek, periods);
    
    if (conflicts.length > 0) {
      return res.status(409).json({
        message: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ.',
        conflicts: conflicts
      });
    }
    
    const schedule = await Schedule.create({
      classId,
      dayOfWeek,
      week,
      semester,
      year,
      periods,
    });
    
    const populatedSchedule = await Schedule.findById(schedule._id)
      .populate('classId')
      .populate('periods.teacherId', '-password');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    populatedSchedule.periods.sort((a, b) => a.startTime.localeCompare(b.startTime));
      
    res.status(201).json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', schedule: populatedSchedule });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞', error: error.message });
  }
};

exports.getAllSchedules = async (req, res) => {
  try {
    const schedules = await Schedule.find()
      .populate({
        path: 'classId',
        populate: {
          path: 'students teachers',
          select: 'name email role'
        }
      })
      .populate('periods.teacherId', 'name email');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedules.forEach(schedule => {
      schedule.periods.sort((a, b) => a.startTime.localeCompare(b.startTime));
    });
    
    res.json(schedules);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞', error: error.message });
  }
};

exports.getScheduleById = async (req, res) => {
  try {
    const schedule = await Schedule.findById(req.params.id)
      .populate('classId')
      .populate('periods.teacherId', '-password');
    if (!schedule) {
      return res.status(404).json({ message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    schedule.periods.sort((a, b) => a.startTime.localeCompare(b.startTime));
    
    res.json(schedule);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞', error: error.message });
  }
};

exports.updateSchedule = async (req, res) => {
  try {
    const { classId, dayOfWeek, week, semester, year, periods } = req.body;
    const updated = await Schedule.findByIdAndUpdate(
      req.params.id,
      { classId, dayOfWeek, week, semester, year, periods },
      { new: true }
    ).populate('classId').populate('periods.teacherId', '-password');
    
    if (!updated) {
      return res.status(404).json({ message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    updated.periods.sort((a, b) => a.startTime.localeCompare(b.startTime));
    
    res.json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', schedule: updated });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞', error: error.message });
  }
};

exports.deleteSchedule = async (req, res) => {
  try {
    const deleted = await Schedule.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    res.json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞', error: error.message });
  }
};

// @desc    Get all schedules for a specific teacher
// @route   GET /api/schedules/teacher/:teacherId
// @access  Private (Teacher, Admin)
exports.getTeacherSchedule = async (req, res) => {
  try {
    const { teacherId } = req.params;
    
    // –£—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if (req.user.role === 'teacher' && req.user.userId !== teacherId) {
      return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤' });
    }
    
    // –ù–∞–π—Ç–∏ –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –≥–¥–µ —É—á–∏—Ç–µ–ª—å –≤–µ–¥–µ—Ç —É—Ä–æ–∫–∏
    const schedules = await Schedule.find({ 'periods.teacherId': teacherId })
      .populate({
        path: 'classId',
        populate: {
          path: 'students teachers',
          select: 'name email role'
        }
      })
      .populate('periods.teacherId', 'name email');

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedules.forEach(schedule => {
      schedule.periods.sort((a, b) => a.startTime.localeCompare(b.startTime));
    });

    console.log(`üìÖ Found ${schedules.length} schedules for teacher ${teacherId}`);
    if (schedules.length > 0) {
      console.log(`üìñ Sample schedule:`, {
        class: schedules[0].classId.name,
        day: schedules[0].dayOfWeek,
        periods: schedules[0].periods.length
      });
    }

    res.json(schedules);
  } catch (error) {
    console.error('Error fetching teacher schedule:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

// @desc    Get all schedules for a specific class
// @route   GET /api/schedules/class/:classId
// @access  Private
exports.getScheduleByClass = async (req, res) => {
  try {
    const { classId } = req.params;
    
    const schedules = await Schedule.find({ classId })
      .populate({
        path: 'classId',
        populate: {
          path: 'students teachers',
          select: 'name email role'
        }
      })
      .populate('periods.teacherId', 'name email');

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedules.forEach(schedule => {
      schedule.periods.sort((a, b) => a.startTime.localeCompare(b.startTime));
    });

    res.json(schedules);
  } catch (error) {
    console.error('Error fetching class schedule:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

// @desc    Get all schedules for a specific day of week
// @route   GET /api/schedules/day/:dayOfWeek
// @access  Private
exports.getScheduleByDay = async (req, res) => {
  try {
    const { dayOfWeek } = req.params;
    
    const schedules = await Schedule.find({ dayOfWeek: parseInt(dayOfWeek) })
      .populate({
        path: 'classId',
        populate: {
          path: 'students teachers',
          select: 'name email role'
        }
      })
      .populate('periods.teacherId', 'name email');

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedules.forEach(schedule => {
      schedule.periods.sort((a, b) => a.startTime.localeCompare(b.startTime));
    });

    res.json(schedules);
  } catch (error) {
    console.error('Error fetching day schedule:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};