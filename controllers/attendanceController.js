// controllers/attendanceController.js
const Attendance = require('../models/Attendance');
const User = require('../models/User');
const Classroom = require('../models/Classroom');

// @desc    Mark attendance for a student
// @route   POST /api/attendance/mark
// @access  Private (Teacher)
exports.markAttendance = async (req, res) => {
  const { student, classId, subject, date, status, teacher } = req.body;

  if (!student || !classId || !subject || !date || !status || !teacher) {
    return res.status(400).json({ message: 'Please provide all required fields' });
  }

  try {
    console.log('üìù Marking attendance:', { student, classId, subject, date, status, teacher });
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const attendanceDate = new Date(date);
    attendanceDate.setHours(0, 0, 0, 0); // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
    
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Å–Ω–∞—á–∞–ª–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª—è–º
    const basicSearchCondition = { 
      student, 
      classId, 
      subject, 
      date: attendanceDate
    };
    
    console.log('üîç Basic search condition:', basicSearchCondition);
    
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    let existingAttendance = await Attendance.findOne(basicSearchCondition);
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ—Ç –¥—Ä—É–≥–æ–≥–æ —É—á–∏—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if (existingAttendance && String(existingAttendance.teacher) !== String(teacher)) {
      console.log('‚ö†Ô∏è Found attendance from different teacher:', existingAttendance.teacher, 'vs', teacher);
      existingAttendance = null; // –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    }
    
    let attendance;
    if (existingAttendance) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      console.log('üîÑ Updating existing attendance record:', existingAttendance._id);
      attendance = await Attendance.findByIdAndUpdate(
        existingAttendance._id,
        { status },
        { new: true, runValidators: true }
      );
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      console.log('‚ûï Creating new attendance record');
      attendance = await Attendance.create({
        student,
        classId,
        subject,
        date: attendanceDate,
        status,
        teacher
      });
    }
    
    console.log('‚úÖ Attendance marked successfully:', attendance);
    res.status(201).json(attendance);
  } catch (error) {
    console.error('‚ùå Error marking attendance:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

// @desc    Get attendance for a specific class on a specific date
// @route   GET /api/attendance/class/:classId/date/:date
// @access  Private (Teacher)
exports.getAttendanceByClassAndDate = async (req, res) => {
  try {
    const { classId, date } = req.params;
    console.log('üìä Fetching attendance for class:', classId, 'date:', date);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const attendanceDate = new Date(date);
    attendanceDate.setHours(0, 0, 0, 0); // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
    
    const attendance = await Attendance.find({ classId, date: attendanceDate })
      .populate('student', 'name')
      .populate('teacher', 'name');
    
    console.log('üìã Found attendance records:', attendance.length);
    res.json(attendance);
  } catch (error) {
    console.error('‚ùå Error fetching attendance:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// @desc    Create a new attendance record
// @route   POST /api/attendance
// @access  Private
exports.createAttendance = async (req, res) => {
  try {
    const newAttendance = new Attendance(req.body);
    const savedAttendance = await newAttendance.save();
    res.status(201).json(savedAttendance);
  } catch (error) {
    res.status(400).json({ message: 'Error creating attendance', error: error.message });
  }
};

// @desc    Get all attendance records
// @route   GET /api/attendance
// @access  Private
exports.getAllAttendance = async (req, res) => {
  try {
    const attendances = await Attendance.find()
      .populate('student', 'name')
      .populate('classId', 'name')
      .populate('teacher', 'name');
    res.json(attendances);
  } catch (error) {
    res.status(500).json({ message: 'Error getting attendance', error: error.message });
  }
};

// @desc    Get a single attendance record by ID
// @route   GET /api/attendance/:id
// @access  Private
exports.getAttendanceById = async (req, res) => {
  try {
    const attendance = await Attendance.findById(req.params.id)
      .populate('student', 'name')
      .populate('classId', 'name')
      .populate('teacher', 'name');
    if (!attendance) {
      return res.status(404).json({ message: 'Attendance not found' });
    }
    res.json(attendance);
  } catch (error) {
    res.status(500).json({ message: 'Error getting attendance', error: error.message });
  }
};

// @desc    Update an attendance record
// @route   PUT /api/attendance/:id
// @access  Private
exports.updateAttendance = async (req, res) => {
  try {
    const updatedAttendance = await Attendance.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!updatedAttendance) {
      return res.status(404).json({ message: 'Attendance not found' });
    }
    res.json(updatedAttendance);
  } catch (error) {
    res.status(400).json({ message: 'Error updating attendance', error: error.message });
  }
};

// @desc    Delete an attendance record
// @route   DELETE /api/attendance/:id
// @access  Private
exports.deleteAttendance = async (req, res) => {
  try {
    const deletedAttendance = await Attendance.findByIdAndDelete(req.params.id);
    if (!deletedAttendance) {
      return res.status(404).json({ message: 'Attendance not found' });
    }
    res.json({ message: 'Attendance deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting attendance', error: error.message });
  }
};

// @desc    Get all attendance records for a specific student
// @route   GET /api/attendance/student/:studentId
// @access  Private
exports.getStudentAttendance = async (req, res) => {
    try {
        const studentId = req.params.studentId;
        console.log('üìä Fetching attendance for student:', studentId);
        
        const attendance = await Attendance.find({ student: studentId })
            .populate('classId', 'name')
            .populate('teacher', 'name')
            .sort({ date: -1 }); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        
        console.log('üìã Found attendance records for student:', attendance.length);
        res.json(attendance);
    } catch (error) {
        console.error('‚ùå Error fetching student attendance:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// @desc    Get attendance stats for a specific student
// @route   GET /api/attendance/student/:studentId/stats
// @access  Private
exports.getStudentAttendanceStats = async (req, res) => {
  try {
    const studentId = req.params.studentId;
    const { period } = req.query; // 'current_month', 'current_semester', 'all'
    
    console.log('üìä Calculating attendance stats for student:', studentId, 'period:', period);
    
    let dateFilter = {};
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (period === 'current_month') {
      const now = new Date();
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
      dateFilter = { date: { $gte: startOfMonth } };
    } else if (period === 'current_semester') {
      // –£—Å–ª–æ–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–µ–º–µ—Å—Ç—Ä –Ω–∞—á–∞–ª—Å—è 3 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥
      const now = new Date();
      const startOfSemester = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
      dateFilter = { date: { $gte: startOfSemester } };
    } else {
      // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω–æ —á–µ–º –≤—Å–µ –≤—Ä–µ–º—è)
      const now = new Date();
      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
      dateFilter = { date: { $gte: thirtyDaysAgo } };
    }
    
    const filter = { student: studentId, ...dateFilter };
    console.log('üìÖ Using filter:', filter);
    
    const attendance = await Attendance.find(filter).sort({ date: -1 });
    
    const total = attendance.length;
    const present = attendance.filter(a => a.status === 'present').length;
    const absent = attendance.filter(a => a.status === 'absent').length;
    const late = attendance.filter(a => a.status === 'late').length;
    const excused = attendance.filter(a => a.status === 'excused').length;
    const attendanceRate = total > 0 ? Math.round((present / total) * 100) : 0;
    
    const stats = {
      total,
      totalPresent: present, // –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend
      present,
      absent,
      late,
      excused,
      attendanceRate,
      period: period || 'last_30_days'
    };
    
    console.log('üìà Attendance stats:', stats);
    res.json(stats);
  } catch (error) {
    console.error('‚ùå Error calculating attendance stats:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
};

// ============================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —É—á–∏—Ç–µ–ª—è
// ============================
exports.getTeacherAttendance = async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if (!req.user) {
      return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
    }
    
    const { teacherId } = req.params;
    
    // –£—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
    if (req.user.role === 'teacher' && req.user.userId !== teacherId) {
      return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤' });
    }
    
    const records = await Attendance.find({ teacher: teacherId })
      .populate('student', '-password')
      .populate('classId');
      
    res.json(records);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞', error: error.message });
  }
};

// ============================
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å—É
// ============================
exports.getClassAttendanceStats = async (req, res) => {
  try {
    const { classId } = req.params;
    const attendance = await Attendance.find({ classId });
    
    const total = attendance.length;
    const present = attendance.filter(a => a.status === 'present').length;
    const absent = attendance.filter(a => a.status === 'absent').length;
    const late = attendance.filter(a => a.status === 'late').length;
    const excused = attendance.filter(a => a.status === 'excused').length;
    const attendanceRate = total > 0 ? Math.round((present / total) * 100) : 0;
    
    res.json({ total, present, absent, late, excused, attendanceRate });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
};

// ============================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å—É
// ============================
exports.getAttendanceByClass = async (req, res) => {
  try {
    const { classId } = req.params;
    const attendance = await Attendance.find({ classId })
      .populate('student', 'name')
      .populate('teacher', 'name')
      .sort({ date: -1 });
    
    res.json(attendance);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
};

// ============================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–µ
// ============================
exports.getAttendanceByDate = async (req, res) => {
  try {
    const { date } = req.params;
    const attendance = await Attendance.find({ date })
      .populate('student', 'name')
      .populate('classId', 'name')
      .populate('teacher', 'name')
      .sort({ classId: 1 });
    
    res.json(attendance);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
};

// ============================
// –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
// ============================
exports.createBulkAttendance = async (req, res) => {
  try {
    const attendanceRecords = req.body;
    
    if (!Array.isArray(attendanceRecords)) {
      return res.status(400).json({ message: '–û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏' });
    }
    
    const createdRecords = await Attendance.insertMany(attendanceRecords);
    res.status(201).json({ 
      message: '–ó–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã', 
      count: createdRecords.length,
      records: createdRecords 
    });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π', error: error.message });
  }
};